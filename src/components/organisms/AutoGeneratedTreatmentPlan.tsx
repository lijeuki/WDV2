import { Card } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Alert, AlertDescription } from '../ui/alert';
import { 
  AlertTriangle, 
  AlertCircle, 
  Info, 
  CheckCircle2, 
  DollarSign, 
  Clock,
  FileText,
  Lightbulb,
  ChevronDown,
  ChevronUp
} from 'lucide-react';
import { useState } from 'react';
import { TreatmentRecommendation, groupByPriority, calculateTotalCost, calculateTotalDuration } from '@/lib/treatment-recommendations';

interface AutoGeneratedTreatmentPlanProps {
  recommendations: TreatmentRecommendation[];
  onAddProcedure: (recommendation: TreatmentRecommendation) => void;
  onProceed: () => void;
}

export function AutoGeneratedTreatmentPlan({
  recommendations,
  onAddProcedure,
  onProceed
}: AutoGeneratedTreatmentPlanProps) {
  const [expandedIds, setExpandedIds] = useState<Set<string>>(new Set());
  const grouped = groupByPriority(recommendations);
  const totalCost = calculateTotalCost(recommendations);
  const totalDuration = calculateTotalDuration(recommendations);

  const toggleExpand = (id: string) => {
    const newExpanded = new Set(expandedIds);
    if (newExpanded.has(id)) {
      newExpanded.delete(id);
    } else {
      newExpanded.add(id);
    }
    setExpandedIds(newExpanded);
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'urgent': return <AlertTriangle className="size-5 text-red-600" />;
      case 'important': return <AlertCircle className="size-5 text-amber-600" />;
      case 'elective': return <Info className="size-5 text-blue-600" />;
      default: return <Info className="size-5" />;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'bg-red-50 border-red-200';
      case 'important': return 'bg-amber-50 border-amber-200';
      case 'elective': return 'bg-blue-50 border-blue-200';
      default: return 'bg-gray-50 border-gray-200';
    }
  };

  const getPriorityBadge = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'bg-red-100 text-red-700 border-red-300';
      case 'important': return 'bg-amber-100 text-amber-700 border-amber-300';
      case 'elective': return 'bg-blue-100 text-blue-700 border-blue-300';
      default: return 'bg-gray-100 text-gray-700';
    }
  };

  const RecommendationCard = ({ rec }: { rec: TreatmentRecommendation }) => {
    const isExpanded = expandedIds.has(rec.id);

    return (
      <Card className={`p-4 ${getPriorityColor(rec.priority)} border-2`}>
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <div className="flex items-center gap-3 mb-2">
              {getPriorityIcon(rec.priority)}
              <div>
                <div className="flex items-center gap-2 mb-1">
                  <h4 className="font-semibold text-lg">{rec.toothName}</h4>
                  <Badge variant="outline" className={getPriorityBadge(rec.priority)}>
                    {rec.priority.toUpperCase()}
                  </Badge>
                </div>
                <p className="text-sm text-gray-600">
                  Finding: <span className="font-semibold">{rec.finding}</span> ({rec.findingCode})
                </p>
              </div>
            </div>

            <div className="bg-white p-3 rounded-lg mb-3">
              <p className="font-semibold text-gray-900 mb-1">Recommended: {rec.recommendedProcedure}</p>
              <p className="text-sm text-gray-600">CPT Code: {rec.procedureCode}</p>
              {rec.surfaces && rec.surfaces.length > 0 && (
                <p className="text-sm text-gray-600 mt-1">
                  Surfaces: {rec.surfaces.join(', ')}
                </p>
              )}
            </div>

            <div className="flex items-start gap-2 mb-3">
              <Lightbulb className="size-5 text-blue-600 mt-0.5 flex-shrink-0" />
              <div>
                <p className="text-sm font-semibold text-gray-900 mb-1">Clinical Reasoning:</p>
                <p className="text-sm text-gray-700">{rec.clinicalReasoning}</p>
              </div>
            </div>

            {(rec.prerequisites || rec.alternatives) && (
              <button
                onClick={() => toggleExpand(rec.id)}
                className="flex items-center gap-2 text-sm text-blue-600 hover:text-blue-700"
              >
                {isExpanded ? <ChevronUp className="size-4" /> : <ChevronDown className="size-4" />}
                {isExpanded ? 'Hide Details' : 'Show Prerequisites & Alternatives'}
              </button>
            )}

            {isExpanded && (
              <div className="mt-3 space-y-2">
                {rec.prerequisites && rec.prerequisites.length > 0 && (
                  <div className="bg-white p-3 rounded border-l-4 border-yellow-400">
                    <p className="text-sm font-semibold text-gray-900 mb-1">Prerequisites:</p>
                    <ul className="text-sm text-gray-700 list-disc list-inside">
                      {rec.prerequisites.map((prereq, idx) => (
                        <li key={idx}>{prereq}</li>
                      ))}
                    </ul>
                  </div>
                )}
                {rec.alternatives && rec.alternatives.length > 0 && (
                  <div className="bg-white p-3 rounded border-l-4 border-blue-400">
                    <p className="text-sm font-semibold text-gray-900 mb-1">Alternative Treatments:</p>
                    <ul className="text-sm text-gray-700 list-disc list-inside">
                      {rec.alternatives.map((alt, idx) => (
                        <li key={idx}>{alt}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}

            <div className="flex items-center gap-4 mt-3 text-sm text-gray-600">
              <div className="flex items-center gap-1">
                <DollarSign className="size-4" />
                <span className="font-semibold">${rec.estimatedCost.toLocaleString()}</span>
              </div>
              <div className="flex items-center gap-1">
                <Clock className="size-4" />
                <span>{rec.estimatedDuration} min</span>
              </div>
            </div>
          </div>

          <Button
            onClick={() => onAddProcedure(rec)}
            size="sm"
            className="ml-4"
          >
            Add to Plan
          </Button>
        </div>
      </Card>
    );
  };

  if (recommendations.length === 0) {
    return (
      <Alert className="bg-green-50 border-green-200">
        <CheckCircle2 className="size-4 text-green-600" />
        <AlertDescription className="text-green-800">
          No findings requiring treatment. Patient's oral health is satisfactory.
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      {/* Summary Card */}
      <Card className="p-6 bg-gradient-to-r from-purple-50 to-blue-50 border-2 border-purple-200">
        <div className="flex items-center gap-3 mb-4">
          <FileText className="size-8 text-purple-600" />
          <div>
            <h2 className="text-2xl font-bold text-purple-900">Auto-Generated Treatment Plan</h2>
            <p className="text-purple-700">Based on odontogram findings and clinical assessment</p>
          </div>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white p-4 rounded-lg">
            <p className="text-sm text-gray-600">Total Findings</p>
            <p className="text-3xl font-bold text-gray-900">{recommendations.length}</p>
          </div>
          <div className="bg-white p-4 rounded-lg">
            <p className="text-sm text-red-600">Urgent</p>
            <p className="text-3xl font-bold text-red-700">{grouped.urgent.length}</p>
          </div>
          <div className="bg-white p-4 rounded-lg">
            <p className="text-sm text-gray-600">Estimated Cost</p>
            <p className="text-2xl font-bold text-green-700">${totalCost.toLocaleString()}</p>
          </div>
          <div className="bg-white p-4 rounded-lg">
            <p className="text-sm text-gray-600">Total Time</p>
            <p className="text-2xl font-bold text-blue-700">{Math.ceil(totalDuration / 60)}h {totalDuration % 60}m</p>
          </div>
        </div>
      </Card>

      {/* Urgent Findings */}
      {grouped.urgent.length > 0 && (
        <div>
          <div className="flex items-center gap-2 mb-3">
            <AlertTriangle className="size-6 text-red-600" />
            <h3 className="text-xl font-bold text-red-900">Urgent Findings ({grouped.urgent.length})</h3>
          </div>
          <div className="space-y-3">
            {grouped.urgent.map(rec => <RecommendationCard key={rec.id} rec={rec} />)}
          </div>
        </div>
      )}

      {/* Important Findings */}
      {grouped.important.length > 0 && (
        <div>
          <div className="flex items-center gap-2 mb-3">
            <AlertCircle className="size-6 text-amber-600" />
            <h3 className="text-xl font-bold text-amber-900">Important Findings ({grouped.important.length})</h3>
          </div>
          <div className="space-y-3">
            {grouped.important.map(rec => <RecommendationCard key={rec.id} rec={rec} />)}
          </div>
        </div>
      )}

      {/* Elective Treatments */}
      {grouped.elective.length > 0 && (
        <div>
          <div className="flex items-center gap-2 mb-3">
            <Info className="size-6 text-blue-600" />
            <h3 className="text-xl font-bold text-blue-900">Elective Treatments ({grouped.elective.length})</h3>
          </div>
          <div className="space-y-3">
            {grouped.elective.map(rec => <RecommendationCard key={rec.id} rec={rec} />)}
          </div>
        </div>
      )}

      {/* Action Button */}
      <div className="flex justify-end">
        <Button
          onClick={onProceed}
          size="lg"
          className="bg-purple-600 hover:bg-purple-700"
        >
          Review & Finalize Treatment Plan
        </Button>
      </div>
    </div>
  );
}
